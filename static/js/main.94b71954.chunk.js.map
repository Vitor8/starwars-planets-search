{"version":3,"sources":["context/PlanetsContext.js","context/PlanetsProvider.js","components/TableElements.js","components/HeaderTable.js","components/Table.js","App.js","index.js"],"names":["PlanetsContext","createContext","PlanetsProvider","children","useState","data","setPlanets","useEffect","a","fetch","then","dataJSON","json","results","getPlanets","Provider","value","TableElements","planet","className","name","climate","created","diameter","edited","gravity","orbital_period","population","rotation_period","surface_water","terrain","HeaderTable","Table","useContext","filterPlanets","setFilterPlanets","column","setSelectColumnFilter","comp","setSelectComparisonFilter","inputValueFilter","setInputValueFilter","updateTabel","setUpdateTableBySelect","selectOptions","label","type","onChange","event","target","e","map","item","onClick","inputString","input","parseInt","nameFilters","x","numb","renderTableInputBySelect","toLowerCase","includes","renderTableInputByName","App","ReactDOM","render","document","getElementById"],"mappings":"sOAIeA,EAFQC,0B,OCyBRC,MAvBf,YAAwC,IAAbC,EAAY,EAAZA,SACzB,EAA2BC,mBAAS,IAApC,mBAAOC,EAAP,KAAaC,EAAb,KAWA,OATAC,qBAAU,YACQ,uCAAG,8BAAAC,EAAA,4DACA,iDADA,SAESC,MADT,kDACyBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAFrD,gBAETC,EAFS,EAETA,QACRP,EAAWO,GAHM,2CAAH,qDAKhBC,KACC,IAGD,cAAC,EAAeC,SAAhB,CAAyBC,MAAQ,CAAEX,QAAnC,SACIF,K,KCQOc,MAtBf,YAAoC,IAAXC,EAAU,EAAVA,OACvB,OACE,qBAAwBC,UAAU,YAAlC,UACE,oBAAI,cAAY,cAAcA,UAAU,gBAAxC,SAAyDD,EAAOE,OAChE,oBAAID,UAAU,gBAAd,SAA+BD,EAAOG,UACtC,oBAAIF,UAAU,gBAAd,SAA+BD,EAAOI,UACtC,oBAAIH,UAAU,gBAAd,SAA+BD,EAAOK,WACtC,oBAAIJ,UAAU,gBAAd,SAA+BD,EAAOM,SACtC,oBAAIL,UAAU,gBAAd,SAA+BD,EAAOO,UACtC,oBAAIN,UAAU,gBAAd,SAA+BD,EAAOQ,iBACtC,oBAAIP,UAAU,gBAAd,SAA+BD,EAAOS,aACtC,oBAAIR,UAAU,gBAAd,SAA+BD,EAAOU,kBACtC,oBAAIT,UAAU,gBAAd,SAA+BD,EAAOW,gBACtC,oBAAIV,UAAU,gBAAd,SAA+BD,EAAOY,YAX9BZ,EAAOE,OCeNW,MAlBf,WACE,OACE,qBAAIZ,UAAU,yBAAd,UACE,oBAAIA,UAAU,eAAd,kBACA,oBAAIA,UAAU,eAAd,qBACA,oBAAIA,UAAU,eAAd,qBACA,oBAAIA,UAAU,eAAd,sBACA,oBAAIA,UAAU,eAAd,oBACA,oBAAIA,UAAU,eAAd,qBACA,oBAAIA,UAAU,eAAd,4BACA,oBAAIA,UAAU,eAAd,wBACA,oBAAIA,UAAU,eAAd,6BACA,oBAAIA,UAAU,eAAd,2BACA,oBAAIA,UAAU,eAAd,yBC+JSa,MAxKf,WACE,IAAQ3B,EAAS4B,qBAAWjC,GAApBK,KACR,EAA0CD,mBAAS,IAAnD,mBAAO8B,EAAP,KAAsBC,EAAtB,KACA,EAAwC/B,mBAAS,cAAjD,mBAAOgC,EAAP,KAAeC,EAAf,KACA,EAA0CjC,mBAAS,aAAnD,mBAAOkC,EAAP,KAAaC,EAAb,KACA,EAAgDnC,mBAAS,GAAzD,mBAAOoC,EAAP,KAAyBC,EAAzB,KACA,EAA8CrC,oBAAS,GAAvD,mBAAOsC,EAAP,KAAoBC,EAApB,KACMC,EAAgB,CACpB,CAAE5B,MAAO,aAAc6B,MAAO,cAC9B,CAAE7B,MAAO,iBAAkB6B,MAAO,kBAClC,CAAE7B,MAAO,WAAY6B,MAAO,YAC5B,CAAE7B,MAAO,kBAAmB6B,MAAO,mBACnC,CAAE7B,MAAO,gBAAiB6B,MAAO,kBAgEnC,OACE,gCAEE,sBAAK1B,UAAU,mBAAf,UAEE,sBAAKA,UAAU,2BAAf,UACE,iDACA,uBACE2B,KAAK,OACL,cAAY,cACZC,SAAW,SAACC,GAAD,OAAWb,EAAiBa,EAAMC,OAAOjC,QACpDG,UAAU,4BAId,sBAAKA,UAAU,8BAAf,UAEE,iEAEA,sBAAK,cAAY,SAAjB,UACE,wBACE4B,SAAW,SAACG,GAAD,OAAOb,EAAsBa,EAAED,OAAOjC,QACjDI,KAAK,gBACL,cAAY,gBACZD,UAAU,eAJZ,SAtCcyB,EAAcO,KAAI,SAACC,GACvC,OAAKV,EAGDU,EAAKpC,QAAUoB,EACV,wBAA2BpB,MAAQoC,EAAKpC,MAAxC,SAAiDoC,EAAKpC,OAAxCoC,EAAKpC,OACnB,KAJA,wBAA2BA,MAAQoC,EAAKpC,MAAxC,SAAiDoC,EAAKpC,OAAxCoC,EAAKpC,YA4CtB,wBAAQ8B,KAAK,SAASO,QAAU,kBAAMV,GAAuB,IAA7D,kBAKF,sBAAK,cAAY,SAAjB,UACE,yBACEI,SAAW,SAACG,GAAD,OAAOX,EAA0BW,EAAED,OAAOjC,QACrDI,KAAK,oBACL,cAAY,oBACZD,UAAU,eAJZ,UAME,wBAAQH,MAAM,YAAd,uBACA,wBAAQA,MAAM,YAAd,uBACA,wBAAQA,MAAM,UAAd,wBAEF,wBACE8B,KAAK,SACL,cAAY,SACZO,QAAU,kBAAMV,GAAuB,IAHzC,kBASF,sBAAK,cAAY,SAAjB,UACE,uBACEG,KAAK,OACL,cAAY,eACZC,SAAW,SAACC,GAAD,OAAWP,EAAoBO,EAAMC,OAAOjC,QACvDG,UAAU,gBAEZ,wBACE2B,KAAK,SACL,cAAY,SACZO,QAAU,kBAAMV,GAAuB,IAHzC,qBAWJ,wBACEG,KAAK,SACL,cAAY,gBACZO,QAAU,kBAAMV,GAAuB,IACvCxB,UAAU,gBAJZ,wBAWF,wBAAOA,UAAU,QAAjB,UACE,gCACE,cAAC,EAAD,MA1FDuB,EAzCP,SAAkCY,GAChC,IAAMC,EAAQC,SAASF,EAAa,IAC9BG,EAAcpD,EAAK8C,KAAI,SAACO,GAC5B,IAAMC,EAAOH,SAASE,EAAE,GAAD,OAAItB,IAAW,IACtC,MAAc,cAATE,GAA2BqB,EAAOJ,GAA8B,YAAnBG,EAAE,GAAD,OAAItB,KAKzC,cAATE,GAA2BqB,EAAOJ,GAA8B,YAAnBG,EAAE,GAAD,OAAItB,KAKzC,YAATE,GAAyBqB,IAASJ,GAA8B,YAAnBG,EAAE,GAAD,OAAItB,IARnD,cAAC,EAAD,CAA8BlB,OAASwC,GAAlBA,EAAEtC,MAapB,QAET,OACE,gCACGqC,IAqBEG,CAAyBpB,GA1DlC,SAAgCe,GAC9B,IAAME,EAAcpD,EAAK8C,KAAI,SAACjC,GAC5B,MAAc,KAAVqC,GAAiBrC,EAAOE,KAAKyC,cAAeC,SAASP,EAAMM,eAE3D,cAAC,EAAD,CAAmC3C,OAASA,GAAvBA,EAAOE,MAGzB,QAET,OACE,gCAAQqC,IA8CDM,CAAuB7B,UC3DrB8B,MAbf,WACE,OACE,eAAC,EAAD,WACE,wBAAQ7C,UAAU,cAAlB,sCAGA,8BACE,cAAC,EAAD,UCTR8C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.94b71954.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlanetsContext = createContext();\n\nexport default PlanetsContext;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nfunction PlanetsProvider({ children }) {\n  const [data, setPlanets] = useState([]);\n\n  useEffect(() => {\n    const getPlanets = async () => {\n      const endpoint = 'https://swapi-trybe.herokuapp.com/api/planets/';\n      const { results } = await fetch(endpoint).then((dataJSON) => dataJSON.json());\n      setPlanets(results);\n    };\n    getPlanets();\n  }, []);\n\n  return (\n    <PlanetsContext.Provider value={ { data } }>\n      { children }\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.arrayOf(PropTypes.array),\n}.isRequire;\n\nexport default PlanetsProvider;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../css/Table.css';\n\nfunction TableElements({ planet }) {\n  return (\n    <tr key={ planet.name } className=\"row-table\">\n      <td data-testid=\"planet-name\" className=\"table-content\">{planet.name}</td>\n      <td className=\"table-content\">{planet.climate}</td>\n      <td className=\"table-content\">{planet.created}</td>\n      <td className=\"table-content\">{planet.diameter}</td>\n      <td className=\"table-content\">{planet.edited}</td>\n      <td className=\"table-content\">{planet.gravity}</td>\n      <td className=\"table-content\">{planet.orbital_period}</td>\n      <td className=\"table-content\">{planet.population}</td>\n      <td className=\"table-content\">{planet.rotation_period}</td>\n      <td className=\"table-content\">{planet.surface_water}</td>\n      <td className=\"table-content\">{planet.terrain}</td>\n    </tr>\n  );\n}\n\nTableElements.propTypes = {\n  planet: PropTypes.arrayOf(PropTypes.object),\n}.isRequire;\n\nexport default TableElements;\n","import React from 'react';\nimport '../css/Table.css';\n\nfunction HeaderTable() {\n  return (\n    <tr className=\"header-table-container\">\n      <th className=\"header-title\">Name</th>\n      <th className=\"header-title\">Climate</th>\n      <th className=\"header-title\">Created</th>\n      <th className=\"header-title\">Diameter</th>\n      <th className=\"header-title\">Edited</th>\n      <th className=\"header-title\">Gravity</th>\n      <th className=\"header-title\">Orbital Period</th>\n      <th className=\"header-title\">Population</th>\n      <th className=\"header-title\">Rotation Period</th>\n      <th className=\"header-title\">Surface Water</th>\n      <th className=\"header-title\">Terrain</th>\n    </tr>\n  );\n}\n\nexport default HeaderTable;\n","import React, { useContext, useState } from 'react';\n\nimport PlanetsContext from '../context/PlanetsContext';\nimport TableElements from './TableElements';\nimport HeaderTable from './HeaderTable';\nimport '../css/Table.css';\n\nfunction Table() {\n  const { data } = useContext(PlanetsContext);\n  const [filterPlanets, setFilterPlanets] = useState(''); // uso atualizar valor input por nome\n  const [column, setSelectColumnFilter] = useState('population'); // select tipo de filtro\n  const [comp, setSelectComparisonFilter] = useState('maior que'); // select comparação(maior,menor,igual)\n  const [inputValueFilter, setInputValueFilter] = useState(0); // input do valor numérico\n  const [updateTabel, setUpdateTableBySelect] = useState(false);\n  const selectOptions = [\n    { value: 'population', label: 'population' },\n    { value: 'orbital_period', label: 'orbital_period' },\n    { value: 'diameter', label: 'diameter' },\n    { value: 'rotation_period', label: 'rotation_period' },\n    { value: 'surface_water', label: 'surface_water' },\n  ];\n\n  function renderTableInputByName(input) {\n    const nameFilters = data.map((planet) => {\n      if (input === '' || (planet.name.toLowerCase()).includes(input.toLowerCase())) {\n        return (\n          <TableElements key={ planet.name } planet={ planet } />\n        );\n      }\n      return null;\n    });\n    return (\n      <tbody>{nameFilters}</tbody>\n    );\n  }\n\n  function renderTableInputBySelect(inputString) {\n    const input = parseInt(inputString, 10);\n    const nameFilters = data.map((x) => {\n      const numb = parseInt(x[`${column}`], 10);\n      if ((comp === 'maior que') && ((numb > input) && (x[`${column}`] !== 'unknown'))) {\n        return (\n          <TableElements key={ x.name } planet={ x } />\n        );\n      }\n      if ((comp === 'menor que') && ((numb < input) && (x[`${column}`] !== 'unknown'))) {\n        return (\n          <TableElements key={ x.name } planet={ x } />\n        );\n      }\n      if ((comp === 'igual a') && ((numb === input) && (x[`${column}`] !== 'unknown'))) {\n        return (\n          <TableElements key={ x.name } planet={ x } />\n        );\n      }\n      return null;\n    });\n    return (\n      <tbody>\n        {nameFilters}\n      </tbody>\n    );\n  }\n\n  const updateOptions = () => {\n    const renderOptions = selectOptions.map((item) => {\n      if (!updateTabel) {\n        return <option key={ item.value } value={ item.value }>{item.value}</option>;\n      }\n      if (item.value !== column) {\n        return <option key={ item.value } value={ item.value }>{item.value}</option>;\n      } return null;\n    });\n    return renderOptions;\n  };\n\n  function renderAllTables() {\n    if (!updateTabel) {\n      return renderTableInputByName(filterPlanets);\n    }\n    return renderTableInputBySelect(inputValueFilter);\n  }\n\n  return (\n    <div>\n\n      <div className=\"inputs-container\">\n\n        <div className=\"filter-by-name-container\">\n          <p>Filtrar por Nome</p>\n          <input\n            type=\"text\"\n            data-testid=\"name-filter\"\n            onChange={ (event) => setFilterPlanets(event.target.value) }\n            className=\"filter-by-name-input\"\n          />\n        </div>\n\n        <div className=\"filter-by-numbers-container\">\n\n          <p>Filtrar por valores numéricos</p>\n\n          <div data-testid=\"filter\">\n            <select\n              onChange={ (e) => setSelectColumnFilter(e.target.value) }\n              name=\"column-filter\"\n              data-testid=\"column-filter\"\n              className=\"input-select\"\n            >\n              {updateOptions()}\n            </select>\n            <button type=\"button\" onClick={ () => setUpdateTableBySelect(false) }>\n              X\n            </button>\n          </div>\n\n          <div data-testid=\"filter\">\n            <select\n              onChange={ (e) => setSelectComparisonFilter(e.target.value) }\n              name=\"comparison-filter\"\n              data-testid=\"comparison-filter\"\n              className=\"input-select\"\n            >\n              <option value=\"maior que\">maior que</option>\n              <option value=\"menor que\">menor que</option>\n              <option value=\"igual a\">igual a</option>\n            </select>\n            <button\n              type=\"button\"\n              data-testid=\"filter\"\n              onClick={ () => setUpdateTableBySelect(false) }\n            >\n              X\n            </button>\n          </div>\n\n          <div data-testid=\"filter\">\n            <input\n              type=\"text\"\n              data-testid=\"value-filter\"\n              onChange={ (event) => setInputValueFilter(event.target.value) }\n              className=\"input-value\"\n            />\n            <button\n              type=\"button\"\n              data-testid=\"filter\"\n              onClick={ () => setUpdateTableBySelect(false) }\n            >\n              X\n            </button>\n          </div>\n\n        </div>\n\n        <button\n          type=\"button\"\n          data-testid=\"button-filter\"\n          onClick={ () => setUpdateTableBySelect(true) }\n          className=\"button-filter\"\n        >\n          Filtrar\n        </button>\n\n      </div>\n\n      <table className=\"table\">\n        <thead>\n          <HeaderTable />\n        </thead>\n        { renderAllTables() }\n      </table>\n    </div>\n  );\n}\n\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport PlanetsProvider from './context/PlanetsProvider';\nimport Table from './components/Table';\nimport './css/Table.css';\n\nfunction App() {\n  return (\n    <PlanetsProvider>\n      <header className=\"header-page\">\n        Star Wars Planets Search\n      </header>\n      <div>\n        <Table />\n      </div>\n    </PlanetsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}